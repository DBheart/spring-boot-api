openapi: 3.0.1
info:
  title: My API
  description: An ecommerce sample demonstrating restdocs-api-spec
  version: 0.1.0
servers:
- url: http://localhost:9010
tags: []
paths:
  /lecture:
    get:
      tags:
      - 수강신청
      summary: 수강신청
      description: 수강신청 테스트
      operationId: lecture-list
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lecture957993693'
              examples:
                lecture-list:
                  value: "[ ]"
    post:
      tags:
      - 수강신청
      summary: 수강신청
      description: 수강신청 저장
      operationId: lecture save
      parameters:
      - name: name
        in: query
        description: 수강과목
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lecture-741699920'
              examples:
                lecture save:
                  value: |-
                    [ {
                      "seq" : 1,
                      "name" : "수학"
                    } ]
  /sample:
    get:
      tags:
      - 테스트
      summary: Get 테스트
      description: Get 테스트
      operationId: test-get
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainResponse'
              examples:
                test-get:
                  value: |-
                    {
                      "message" : "get test success"
                    }
    post:
      tags:
      - 테스트- post body
      summary: Post 테스트- body
      description: Post 테스트- body
      operationId: post param
      parameters:
      - name: message
        in: query
        description: message
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "200"
  /sample/dto:
    post:
      tags:
      - 테스트- post dto
      summary: Post 테스트- dto
      description: Post 테스트- dto
      operationId: post dto
      parameters:
      - name: message
        in: query
        description: message
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "200"
  /sample/list:
    get:
      tags:
      - 테스트- list dto
      summary: list dto 테스트- dto
      description: list 테스트- dto
      operationId: list dto
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sample-list-10996445'
              examples:
                list dto:
                  value: "[ ]"
  /sample/param:
    get:
      tags:
      - 테스트- get param
      summary: Get 테스트- param
      description: Get 테스트- param
      operationId: get param
      parameters:
      - name: userId
        in: query
        description: user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "200"
  /sample/get/{userId}:
    get:
      tags:
      - 테스트- get path
      summary: Get 테스트- path
      description: Get 테스트- path
      operationId: get path
      parameters:
      - name: userId
        in: path
        description: ""
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "200"
  /web/list/404:
    get:
      tags:
      - 웹 프로그래밍 테스트
      summary: 데이터 없음
      description: 데이터 없음
      operationId: web-test3
      responses:
        "404":
          description: "404"
  /web/list/500:
    get:
      tags:
      - 웹 프로그래밍 테스트
      summary: 실패 확인
      description: 실패 확인
      operationId: web-test2
      responses:
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/web-list-500314873975'
              examples:
                web-test2:
                  value: |-
                    {
                      "status" : 500,
                      "error" : "FAIL",
                      "message" : "서버오류가 발생하였습니다."
                    }
  /web/list/recode:
    get:
      tags:
      - 웹 프로그래밍 테스트
      summary: 데이터 조회
      description: 데이터 조회
      operationId: web-test
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/web-list-recode-1974344496'
              examples:
                web-test:
                  value: |-
                    [ {
                      "id" : "id1",
                      "name" : "name1"
                    }, {
                      "id" : "id2",
                      "name" : "name2"
                    } ]
components:
  schemas:
    web-list-recode-1974344496:
      type: array
      description: 데이터
      items:
        type: object
        properties:
          name:
            type: string
            description: 이름
          id:
            type: string
            description: 아이디
        description: 데이터
    web-list-500314873975:
      type: object
      properties:
        message:
          type: string
          description: 오류 메세지
        error:
          type: string
          description: 실패 유무
        status:
          type: number
          description: HTTP STATUS
    lecture957993693:
      type: array
      description: 수강신청 리스트
      items:
        oneOf:
        - type: object
        - type: boolean
        - type: string
        - type: number
    lecture-741699920:
      type: array
      description: 수강신청 과목 리스트
      items:
        type: object
        properties:
          name:
            type: string
            description: 수강신청 명
          seq:
            type: number
            description: 수강신청 seq
        description: 수강신청 과목 리스트
    sample-list-10996445:
      type: array
      description: 리턴데이터
      items:
        oneOf:
        - type: object
        - type: boolean
        - type: string
        - type: number
    MainResponse:
      title: MainResponse
      type: object
      properties:
        message:
          type: string
          description: 메세지
